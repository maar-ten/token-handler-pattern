load_module modules/ngx_http_js_module.so;
load_module dyn_modules/ngx_http_redis2_module.so;

events {}

http {
    js_path '/etc/nginx/njs/';

    js_import utils.js;

    server {
        listen 80;

        location /backend {
            auth_request /validate;
            js_set $proxy_path utils.getProxyPath;

            proxy_pass http://localhost:8090/$proxy_path;
        }

        location /get {
            auth_request /validate;

            proxy_pass http://localhost:8090/retrieve;
        }

        location /set {
            auth_request /validate;

            proxy_pass http://localhost:8090/store;
        }

        location /validate {
            # keep endpoint private from outside
            internal;

            # authorization header or redis cookie is required
            js_content utils.validateRequestHeaders;
        }
    }

    # redis proxy
    server {
        listen 8090;

        location /store {
            # create session key
            js_set $key utils.randomString;

            # get authorization token
            js_set $value utils.parseToken;

            # store token in redis
            redis2_query set $key $value;
            redis2_pass redis:6379;

            # create session cookie
            add_header Set-Cookie 'redis_key=$key; HttpOnly';

            # forward request to backend
            proxy_pass http://localhost:8100;
        }

        location /retrieve {
            # get redis key
            js_set $key utils.getRedisCookieValue;

            # retrieve token from redis
            redis2_query get $key;
            redis2_pass redis:6379;

            # parse token from redis response
            js_set $token utils.parseTokenFromRedisQueryResult;

            # add authorization token header
            add_header Authorization 'BEARER $token';

            # forward request to backend
            proxy_pass http://localhost:8100;
        }
    }

    # backend proxy
    server {
        listen 8100;

        location / {
            auth_request utils.validateRequestHeaders;
            js_set $token utils.parseToken;

            return 200 'data requested with $token\n';
        }
    }
}